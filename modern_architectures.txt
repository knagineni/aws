aws apprunner create-service \                        
 ➥ --service-name simple \                           
 ➥ --source-configuration '{"ImageRepository": \
 ➥ {"ImageIdentifier": "public.ecr.aws/
 ➥ s5r5a1t5/simple:latest", \                        
 ➥ "ImageRepositoryType": "ECR_PUBLIC"}}'       

$ aws cloudformation create-stack --stack-name notea \
➥ --template-url https:/ /s3.amazonaws.com/\
➥ awsinaction-code3/chapter18/notea.yaml --parameters \
➥ "ParameterKey=ApplicationID,ParameterValue=$ApplicationId" \
➥ "ParameterKey=Password,ParameterValue=$Password" \
➥ --capabilities CAPABILITY_IAM

$ aws cloudformation wait stack-create-complete \
➥ --stack-name notea && aws cloudformation describe-stacks \
➥ --stack-name notea --query "Stacks[0].Outputs[0].OutputValue" \
➥ --output text

TaskDefinition:
  Type: 'AWS::ECS::TaskDefinition'
  Properties:
    ContainerDefinitions:                               
    - Name: app                                         
      Image: 'public.ecr.aws/s5r5a1t5/notea:latest'     
      PortMappings:
      - ContainerPort: 3000                             
        Protocol: tcp
      Essential: true
      LogConfiguration:                                 
        LogDriver: awslogs
        Options:
          'awslogs-region': !Ref 'AWS::Region'
          'awslogs-group': !Ref LogGroup
          'awslogs-stream-prefix': app
      Environment:                                      
      - Name: 'PASSWORD'
        Value: !Ref Password
      - Name: 'STORE_REGION'
        Value: !Ref 'AWS::Region'
      - Name: 'STORE_BUCKET'
        Value: !Ref Bucket
      - Name: COOKIE_SECURE
        Value: 'false'
    Cpu: 512                                            
    ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'   
    Family: !Ref 'AWS::StackName'
    Memory: 1024                                        
    NetworkMode: awsvpc                                 
    RequiresCompatibilities: [FARGATE]                  
    TaskRoleArn: !GetAtt 'TaskRole.Arn'     

TaskRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Statement:
      - Effect: Allow
        Principal:
          Service: 'ecs-tasks.amazonaws.com'     
        Action: 'sts:AssumeRole'
    Policies:
    - PolicyName: S3AccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 's3:GetObject'                       
          - 's3:PutObject'                       
          - 's3:DeleteObject'                    
          Resource: !Sub '${Bucket.Arn}/*'       
        - Effect: Allow
            Action:
            - 's3:ListBucket'                    
            Resource: !Sub '${Bucket.Arn}'
Bucket:                                          
  Type: 'AWS::S3::Bucket'
  Properties:
    BucketName: !Sub 'awsinaction-notea-${ApplicationID}'

Service:
  DependsOn: HttpListener
  Type: 'AWS::ECS::Service'
  Properties:
    Cluster: !Ref 'Cluster'                      
    CapacityProviderStrategy:
    - Base: 0
      CapacityProvider: 'FARGATE'                
      Weight: 1
    DeploymentConfiguration:
      MaximumPercent: 200                        
      MinimumHealthyPercent: 100                 
      DeploymentCircuitBreaker:                  
        Enable: true
        Rollback: true
    DesiredCount: 2                              
    HealthCheckGracePeriodSeconds: 30            
    LoadBalancers:                               
    - ContainerName: 'app'                       
      ContainerPort: 3000                        
      TargetGroupArn: !Ref TargetGroup           
    NetworkConfiguration:
      AwsvpcConfiguration:
        AssignPublicIp: 'ENABLED'                
        SecurityGroups:
        - !Ref ServiceSecurityGroup              
        Subnets: [!Ref SubnetA, !Ref SubnetB]    
    PlatformVersion: '1.4.0'                     
    TaskDefinition: !Ref TaskDefinition   


ScalableTarget:
  Type: AWS::ApplicationAutoScaling::ScalableTarget
  Properties:
    MaxCapacity: '4'                                                 
    MinCapacity: '2'                                                 
    RoleARN: !GetAtt 'ScalableTargetRole.Arn'                        
    ServiceNamespace: ecs                                            
    ScalableDimension: 'ecs:service:DesiredCount'                    
    ResourceId: !Sub                                                 
    - 'service/${Cluster}/${Service}'
    - Cluster: !Ref Cluster
      Service: !GetAtt 'Service.Name'
CPUScalingPolicy:
  Type: AWS::ApplicationAutoScaling::ScalingPolicy
  Properties:
    PolicyType: TargetTrackingScaling                                
    PolicyName: !Sub 'awsinaction-notea-${ApplicationID}'
    ScalingTargetId: !Ref ScalableTarget                             
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0                                              
      ScaleInCooldown: 180                                           
      ScaleOutCooldown: 60                                           
      PredefinedMetricSpecification:
        PredefinedMetricType: ECSServiceAverageCPUUtilization                      
